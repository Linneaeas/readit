To Do:
Lägga till kommentar 
Skapa nytt inlägg

Om tid och lust: 
Spara till localStorage om vi vill/hinner
Lägga till fler förtidsskrivna kommentarer på posts



Inlägg på huvudsidan ska visa:

OK Titel
OK En del av innehållet (max 60 tecken) (kallad body i API:et)
OK Taggar
OK Namn på skaparen (användaren)

Skapa nytt inlägg
Denna funktionalitet implementeras genom att välja vilken användare som ska skapa inlägget. Detta är inte realistiskt och inte hur reddit fungerar eftersom man vanligtvis är inloggad på en användare, men det är så uppgiften är. Vid skapandet av inlägget ska man alltså få välja vilken användare (utav de som API:et innehåller) som skapar inlägget.
Ni skall anroppa API:et för att skapa nya inlägg (se endpoint)
Tänk på att API:et inte faktiskt ändrar inlägg-databasen så ni måste hantera det lokalt


OK  Du ska kunna trycka på ett inlägg vilket skickar dig till en "ny" sida som visar hela inlägget. På denna sida ska följande visas:
OK Titel
OK Hela innehållet (kallad body i API:et)
OK  Taggar
OK     Namn på skaparen (användaren)
OK Antal reaktioner (kallad reactions i API:et)
OK Kommentar(ej flera)
OK En kommentar ska bestå av dess innehåll (också kallad body i API:et) samt namnet på skaparen (användaren) av kommentaren
På sidan skall också följande vara möjligt:

Skriva ny kommentar på inlägget
Ni skall anroppa API:et för att lägga till nya kommentarer (se endpoint)
Tänk på att API:et inte faktiskt ändrar kommentar-databasen så ni måste hantera det lokalt
Reagera (ökar bara reactions antalet)
Övrig information:

API objekten innehåller all information du kan behöva
Nya användare kan inte skapas. De som kommer från API:et är alla som ska finnas
Det finns ingen "inloggning"


 


          



     /*In the routing configuration you provided, the App component is defining the routing for your application using React Router. Let's break down how the routes are working:

<Route path="/" element={<Home posts={posts} users={users} />} />:

When the URL matches the root path '/', it renders the Home component and passes the posts and users data as props to Home.
<Route path="/CreatePost" element={<CreatePost />} />:

When the URL matches '/CreatePost', it renders the CreatePost component.
<Route path="/Post/:id" element={<Post posts={posts} users={users} />} />:

When the URL matches '/Post/:id', where :id is a route parameter, it renders the Post component and passes the posts and users data as props to Post.
In the case of the Post component, it receives posts and users as props just like the Home component. The difference is in how these props are used within each component:

In the Home component, posts and users are used to display a list of posts, and they are accessed directly as local variables within the component.

In the Post component, posts and users are used to find and display information about a specific post and its associated user. The post and user variables are created by finding the appropriate data within the posts and users arrays based on the id parameter from the URL.

So, both components receive posts and users as props, but they use them differently based on the component's specific functionality. The Post component has additional logic to locate and display a single post and its associated user, while the Home component displays a list of posts.

The routing configuration you provided is correctly passing the data to both components, and they are working differently because they serve different purposes within your application. */
